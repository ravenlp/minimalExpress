{"version":3,"sources":["../../src/api/stats.js"],"names":["router","express","Router","jsonParser","bodyParser","json","handleTracking","fullUrl","parsedUrl","url","parse","hostname","results","Stats","addOneOrCreate","get","req","res","next","status","rows","find","sort","count","limit","exec","post","body","message","data"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,GAAGC,iBAAQC,MAAR,EAAf,C,CAEA;;;AACA,MAAMC,UAAU,GAAGC,oBAAWC,IAAX,EAAnB;;AAEA,eAAeC,cAAf,CAA+BC,OAA/B,EAAwC;AACtC,QAAMC,SAAS,GAAGC,aAAIC,KAAJ,CAAUH,OAAV,CAAlB;;AACA,MAAGC,SAAS,CAACG,QAAb,EAAuB;AACrB,UAAMC,OAAO,GAAG,MAAMC,UAAMC,cAAN,CAAqBN,SAAS,CAACG,QAA/B,CAAtB;AACD;AACF;AAED;;;AACAX,MAAM,CAACe,GAAP,CAAW,cAAX,EAA4B,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AACnDD,EAAAA,GAAG,CAACZ,IAAJ,CAAS;AACPc,IAAAA,MAAM,EAAG;AADF,GAAT;AAGD,CAJD;AAMA;;AACAnB,MAAM,CAACe,GAAP,CAAW,GAAX,EAAgB,gBAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;AAC7C,QAAME,IAAI,GAAG,MAAMP,UAAMQ,IAAN,CAAW,EAAX,EAAeC,IAAf,CAAoB;AAACC,IAAAA,KAAK,EAAE,CAAC;AAAT,GAApB,EAAiCC,KAAjC,CAAuC,CAAvC,EAA0CC,IAA1C,EAAnB;AACAR,EAAAA,GAAG,CAACZ,IAAJ,CAASe,IAAT;AACD,CAHD;AAKA;;AACApB,MAAM,CAAC0B,IAAP,CAAY,QAAZ,EAAsBvB,UAAtB,EAAmC,UAASa,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC1D,MAAIS,IAAI,GAAGX,GAAG,CAACW,IAAf;;AACA,MAAG,CAACA,IAAD,IAAS,CAACA,IAAI,CAAClB,GAAlB,EAAuB;AACrBQ,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX;AACAF,IAAAA,GAAG,CAACZ,IAAJ,CAAS;AAACc,MAAAA,MAAM,EAAE,OAAT;AAAkBS,MAAAA,OAAO,EAAE;AAA3B,KAAT;AACA;AACD;;AACDtB,EAAAA,cAAc,CAACqB,IAAI,CAAClB,GAAN,CAAd;AACAQ,EAAAA,GAAG,CAACZ,IAAJ,CAAS;AACPc,IAAAA,MAAM,EAAG,SADF;AAEPU,IAAAA,IAAI,EAAG;AACJpB,MAAAA,GAAG,EAAEkB,IAAI,CAAClB;AADN;AAFA,GAAT;AAMD,CAdD;eAgBeT,M","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport url from 'url';\nimport { Stats } from '../db';\n\nconst router = express.Router();\n\n// create application/json parser\nconst jsonParser = bodyParser.json()\n\nasync function handleTracking (fullUrl) {\n  const parsedUrl = url.parse(fullUrl);\n  if(parsedUrl.hostname) {\n    const results = await Stats.addOneOrCreate(parsedUrl.hostname);\n  }\n} \n\n/* GET healthcheck */\nrouter.get('/healthcheck',  function(req, res, next) {\n  res.json({\n    status : \"success\"\n  })\n});\n\n/* GET Top referrers */\nrouter.get('/', async function(req, res, next) {\n  const rows = await Stats.find({}).sort({count: -1}).limit(5).exec();\n  res.json(rows)\n});\n\n/* POST new url to track */\nrouter.post('/track', jsonParser,  function(req, res, next) {\n  let body = req.body;\n  if(!body || !body.url) {\n    res.status(400);\n    res.json({status: 'error', message: 'Invalid payload'})\n    return;\n  }\n  handleTracking(body.url);\n  res.json({\n    status : \"success\",\n    data : {\n       url: body.url\n     }\n  })\n});\n\nexport default router;\n"],"file":"stats.js"}